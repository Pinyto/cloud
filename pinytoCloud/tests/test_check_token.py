# coding=utf-8
"""
This File is part of Pinyto
"""
from django.test import TestCase
from pinytoCloud.checktoken import check_token
from pinytoCloud.models import User, StoredPublicKey, Session
from django.utils import timezone
import json


class TokenCheckTest(TestCase):
    def test_no_base16_token(self):
        response = check_token('xxx')
        self.assertEqual(response.status_code, 200)
        res = json.loads(response.content)
        self.assertIn('error', res)
        self.assertEqual(res['error'], "The token is not in valid base16-format.")

    def test_wrong_length(self):
        response = check_token(
            '6385AAC2648396659A7CFD4D0599034F847C4ACD1F9F90BCE6C58D4F79069B5ACA68C81664C1184DF592DD1C4C62C63F01DE9' +
            '14CF5A00750312BA6F87D13F2DD872EACD7CB23D768E4905A6294FC79D793803A9D105ECC278A3E57339943E45FF970D7DACA' +
            '74150B269ACDB1ED4A6593B75885A7D59788DE17D6E33C92473E6A3DC59B1A5256F9CDDAD635E65CB502F41C78A7E8890BEC4' +
            '4DD4A5E837D01982E99FED24F6621E76972F140AAF9EE4B5938BA2FFB967AA08B4F6E8E76DAB6A87B967EE129D33CA7FE76EF' +
            'A40DDC1F1D74D836083BD10FF85BFC8CFCB7FF552C290D178A102A2AC39E511F9DE66CE8D666A002D29334ED9CF3CB7FFB5B1' +
            'DF68A09945B7750A90BA4CF37300A97F2C80BA5F91D2D053A78302395514B5D08A4E7F1758641F55C4D64ECFB50BB9202EE48' +
            'A93BE55C1FB7355461B973A24E1961FDE235CA7E02CE58F90D0C75A044D327A69462ED1027DC793276E91C2FB776A7A78406E' +
            'A798D01899BD166BA61D9A33DE7FA32E1898BAC6F306D1DDAC1DCEA1400E8AAAA'
        )
        self.assertEqual(response.status_code, 200)
        res = json.loads(response.content)
        self.assertIn('error', res)
        self.assertEqual(res['error'], "The token has an invalid length.")

    def test_no_session(self):
        response = check_token(
            '6385AAC2648396659A7CFD4D0599034F847C4ACD1F9F90BCE6C58D4F79069B5ACA68C81664C1184DF592DD1C4C62C63F01DE9' +
            '14CF5A00750312BA6F87D13F2DD872EACD7CB23D768E4905A6294FC79D793803A9D105ECC278A3E57339943E45FF970D7DACA' +
            '74150B269ACDB1ED4A6593B75885A7D59788DE17D6E33C92473E6A3DC59B1A5256F9CDDAD635E65CB502F41C78A7E8890BEC4' +
            '4DD4A5E837D01982E99FED24F6621E76972F140AAF9EE4B5938BA2FFB967AA08B4F6E8E76DAB6A87B967EE129D33CA7FE76EF' +
            'A40DDC1F1D74D836083BD10FF85BFC8CFCB7FF552C290D178A102A2AC39E511F9DE66CE8D666A002D29334ED9CF3CB7FFB5B1' +
            'DF68A09945B7750A90BA4CF37300A97F2C80BA5F91D2D053A78302395514B5D08A4E7F1758641F55C4D64ECFB50BB9202EE48' +
            'A93BE55C1FB7355461B973A24E1961FDE235CA7E02CE58F90D0C75A044D327A69462ED1027DC793276E91C2FB776A7A78406E' +
            'A798D01899BD166BA61D9A33DE7FA32E1898BAC6F306D1DDAC1DCEA1400E8'
        )
        self.assertEqual(response.status_code, 200)
        res = json.loads(response.content)
        self.assertIn('error', res)
        self.assertEqual(res['error'], "Unknown token. Please authenticate.")

    def test_successful(self):
        hugo = User(name='hugo')
        n = "44819645633794177064374433702412067761810841911505887076937243148608168506288814968490125899991436404" + \
            "73460666964598353243015247963273818253017363770355874807104124173287768629167404409759992760226017776" + \
            "91794078550529394483028420021497231582600236168798179432868392243199461277852176728307154871958758167" + \
            "55915656270963824873414372727902912662061704317350060113171870618235070874528016637733539749452936958" + \
            "36309256427426599485862682841644121112508463341122416441266091753414530591981671500374801814002440637" + \
            "79206988072102375807281179593630496176490860308592873002017066265769227521850288496730569731325356035" + \
            "75709705804389452963429446209090281181198312212078942438375187352951092627007211829979142639030767822" + \
            "90688059670133506261782024039100227468751916576386439758688208328415660157197873568680255352172029124" + \
            "53663022693800259960461449906351642931128748448787494175277109726096069796085022115538441518684931184" + \
            "1158934104945289"
        e = 65537
        key = StoredPublicKey.create(hugo, n, e)
        session = Session(token="abcdabcdabcdabcd", timestamp=timezone.now(), user=hugo, key=key)
        session.save()
        return_value = check_token(
            '6385AAC2648396659A7CFD4D0599034F847C4ACD1F9F90BCE6C58D4F79069B5ACA68C81664C1184DF592DD1C4C62C63F01DE9' +
            '14CF5A00750312BA6F87D13F2DD872EACD7CB23D768E4905A6294FC79D793803A9D105ECC278A3E57339943E45FF970D7DACA' +
            '74150B269ACDB1ED4A6593B75885A7D59788DE17D6E33C92473E6A3DC59B1A5256F9CDDAD635E65CB502F41C78A7E8890BEC4' +
            '4DD4A5E837D01982E99FED24F6621E76972F140AAF9EE4B5938BA2FFB967AA08B4F6E8E76DAB6A87B967EE129D33CA7FE76EF' +
            'A40DDC1F1D74D836083BD10FF85BFC8CFCB7FF552C290D178A102A2AC39E511F9DE66CE8D666A002D29334ED9CF3CB7FFB5B1' +
            'DF68A09945B7750A90BA4CF37300A97F2C80BA5F91D2D053A78302395514B5D08A4E7F1758641F55C4D64ECFB50BB9202EE48' +
            'A93BE55C1FB7355461B973A24E1961FDE235CA7E02CE58F90D0C75A044D327A69462ED1027DC793276E91C2FB776A7A78406E' +
            'A798D01899BD166BA61D9A33DE7FA32E1898BAC6F306D1DDAC1DCEA1400E8'
        )
        self.assertEqual(return_value, session)